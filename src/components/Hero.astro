---
import { useTranslations } from '../i18n/utils';
import site from '../data/site.json';

export interface Props {
  lang: 'pt' | 'en';
}

const { lang } = Astro.props;
const t = useTranslations(lang);
---

<section id="home" class="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 pt-16 relative overflow-hidden">
  <!-- Neural Network Background -->
  <div class="absolute inset-0 opacity-30 dark:opacity-20 z-0">
    <canvas id="neuralCanvas" class="absolute inset-0 w-full h-full pointer-events-none"></canvas>
    <!-- Enhanced animated pattern -->
    <div class="absolute inset-0 neural-network-bg">
      <!-- Animated nodes -->
      <div class="absolute top-1/4 left-1/4 w-4 h-4 bg-blue-500 rounded-full animate-pulse opacity-60 shadow-lg shadow-blue-500/50"></div>
      <div class="absolute top-1/2 left-1/3 w-3 h-3 bg-blue-400 rounded-full animate-pulse opacity-50 shadow-md shadow-blue-400/50" style="animation-delay: 0.5s; animation-duration: 1.5s;"></div>
      <div class="absolute top-3/4 left-1/2 w-5 h-5 bg-blue-600 rounded-full animate-pulse opacity-40 shadow-lg shadow-blue-600/50" style="animation-delay: 1s; animation-duration: 2s;"></div>
      <div class="absolute top-1/3 right-1/4 w-3 h-3 bg-indigo-500 rounded-full animate-pulse opacity-70 shadow-md shadow-indigo-500/50" style="animation-delay: 1.5s; animation-duration: 1.8s;"></div>
      <div class="absolute bottom-1/3 right-1/3 w-4 h-4 bg-indigo-400 rounded-full animate-pulse opacity-55 shadow-lg shadow-indigo-400/50" style="animation-delay: 2s; animation-duration: 1.2s;"></div>
      <div class="absolute top-2/3 left-2/3 w-2 h-2 bg-purple-500 rounded-full animate-pulse opacity-45 shadow-sm shadow-purple-500/50" style="animation-delay: 2.5s; animation-duration: 1.7s;"></div>
      <div class="absolute bottom-1/4 left-3/4 w-3 h-3 bg-cyan-500 rounded-full animate-pulse opacity-50 shadow-md shadow-cyan-500/50" style="animation-delay: 3s; animation-duration: 1.3s;"></div>
      
      <!-- Connecting lines with animation -->
      <svg class="absolute inset-0 w-full h-full neural-connections" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <linearGradient id="connectionGrad" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:rgb(59, 130, 246);stop-opacity:0.1" />
            <stop offset="50%" style="stop-color:rgb(59, 130, 246);stop-opacity:0.6" />
            <stop offset="100%" style="stop-color:rgb(99, 102, 241);stop-opacity:0.1" />
          </linearGradient>
          <pattern id="data-flow" x="0" y="0" width="40" height="40" patternUnits="userSpaceOnUse">
            <circle cx="10" cy="10" r="1" fill="rgb(34, 197, 94)" opacity="0.8">
              <animate attributeName="opacity" values="0.2;0.8;0.2" dur="2s" repeatCount="indefinite"/>
            </circle>
            <circle cx="30" cy="30" r="0.8" fill="rgb(59, 130, 246)" opacity="0.6">
              <animate attributeName="opacity" values="0.1;0.6;0.1" dur="1.5s" repeatCount="indefinite" begin="0.5s"/>
            </circle>
          </pattern>
        </defs>
        
        <!-- Animated connecting lines -->
        <path d="M 25% 25% Q 40% 15% 33% 50%" stroke="url(#connectionGrad)" stroke-width="1" fill="none" opacity="0.4">
          <animate attributeName="opacity" values="0.1;0.6;0.1" dur="3s" repeatCount="indefinite"/>
        </path>
        <path d="M 33% 50% Q 60% 40% 75% 75%" stroke="url(#connectionGrad)" stroke-width="1" fill="none" opacity="0.3">
          <animate attributeName="opacity" values="0.1;0.5;0.1" dur="2.5s" repeatCount="indefinite" begin="0.5s"/>
        </path>
        <path d="M 50% 75% Q 30% 60% 25% 25%" stroke="url(#connectionGrad)" stroke-width="1" fill="none" opacity="0.5">
          <animate attributeName="opacity" values="0.1;0.7;0.1" dur="2s" repeatCount="indefinite" begin="1s"/>
        </path>
        <path d="M 75% 33% Q 55% 45% 67% 67%" stroke="url(#connectionGrad)" stroke-width="0.8" fill="none" opacity="0.3">
          <animate attributeName="opacity" values="0.1;0.4;0.1" dur="2.8s" repeatCount="indefinite" begin="1.5s"/>
        </path>
        <path d="M 67% 67% Q 45% 55% 33% 33%" stroke="url(#connectionGrad)" stroke-width="0.8" fill="none" opacity="0.4">
          <animate attributeName="opacity" values="0.1;0.6;0.1" dur="1.8s" repeatCount="indefinite" begin="2s"/>
        </path>
        
        <!-- Data flow pattern overlay -->
        <rect width="100%" height="100%" fill="url(#data-flow)" opacity="0.3"/>
      </svg>
    </div>
  </div>
  
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
    <div class="text-center">
      <!-- Avatar/Profile Image -->
      <div class="mb-8">
        <div class="w-32 h-32 mx-auto rounded-full bg-gradient-to-r from-blue-600 to-indigo-600 p-1">
          <img 
            src="/images/author.jpeg" 
            alt={site.name}
            class="w-full h-full rounded-full object-cover"
          />
        </div>
      </div>
      
      <!-- Greeting -->
      <div class="mb-4">
        <p class="text-lg text-gray-600 dark:text-gray-400 mb-2">
          {t('hero.greeting')}
        </p>
        <h1 class="text-4xl sm:text-5xl md:text-6xl font-bold text-gray-900 dark:text-white mb-4">
          {site.name}
        </h1>
      </div>
      
      <!-- Role with Typewriter Effect -->
      <div class="mb-6">
        <h2 class="text-xl sm:text-2xl md:text-3xl font-semibold text-blue-600 dark:text-blue-400 min-h-[1.5em]">
          <span id="typewriter" data-text={site.role[lang]}></span>
          <span class="animate-pulse">|</span>
        </h2>
      </div>
      
      <!-- Description -->
      <p class="text-lg sm:text-xl text-gray-600 dark:text-gray-400 max-w-4xl mx-auto mb-6 leading-relaxed">
        {site.summary[lang]}
      </p>
      
      <!-- Philosophy Quote -->
      <blockquote class="text-sm italic text-gray-500 dark:text-gray-400 max-w-2xl mx-auto mb-8 border-l-4 border-blue-500 pl-4">
        {site.philosophy[lang]}
      </blockquote>
      
      <!-- CTA Buttons -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center items-center">
        <a
          href="#projects"
          class="inline-flex items-center px-8 py-3 border border-transparent text-base font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200 shadow-lg hover:shadow-xl"
        >
          {t('hero.cta.projects')}
          <svg class="ml-2 -mr-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </a>
        
        <a
          href="#about"
          class="inline-flex items-center px-8 py-3 border border-gray-300 dark:border-gray-600 text-base font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200 shadow-lg hover:shadow-xl"
        >
          {t('hero.cta.about')}
          <svg class="ml-2 -mr-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
          </svg>
        </a>
      </div>
      
      <!-- Social Links -->
      <div class="mt-12">
        <div class="flex justify-center space-x-6">
          <a
            href={site.social.github}
            target="_blank"
            rel="noopener noreferrer"
            class="text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
            title="GitHub"
          >
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
            </svg>
          </a>
          
          <a
            href={site.social.linkedin}
            target="_blank"
            rel="noopener noreferrer"
            class="text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
            title="LinkedIn"
          >
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
              <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
            </svg>
          </a>
          
          <a
            href={site.social.twitter}
            target="_blank"
            rel="noopener noreferrer"
            class="text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
            title="Twitter"
          >
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
              <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
            </svg>
          </a>
        </div>
      </div>
      
      <!-- Scroll Down Indicator -->
      <div class="mt-16 animate-bounce">
        <a href="#projects" class="inline-block text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
          </svg>
        </a>
      </div>
    </div>
  </div>
</section>

<script>
  // Simplified Canvas Animation
  function initNeuralCanvas() {
    const canvas = document.getElementById('neuralCanvas');
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    let animationId;
    
    // Set canvas size
    function resizeCanvas() {
      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;
    }
    
    // Create simple floating particles
    const particles = [];
    for (let i = 0; i < 20; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        vx: (Math.random() - 0.5) * 0.5,
        vy: (Math.random() - 0.5) * 0.5,
        radius: Math.random() * 3 + 1,
        opacity: Math.random() * 0.5 + 0.2
      });
    }
    
    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Draw particles
      particles.forEach(particle => {
        // Update position
        particle.x += particle.vx;
        particle.y += particle.vy;
        
        // Bounce off edges
        if (particle.x <= 0 || particle.x >= canvas.width) particle.vx *= -1;
        if (particle.y <= 0 || particle.y >= canvas.height) particle.vy *= -1;
        
        // Keep in bounds
        particle.x = Math.max(0, Math.min(canvas.width, particle.x));
        particle.y = Math.max(0, Math.min(canvas.height, particle.y));
        
        // Draw particle with glow
        ctx.shadowBlur = 10;
        ctx.shadowColor = 'rgb(59, 130, 246)';
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);
        ctx.fillStyle = `rgba(59, 130, 246, ${particle.opacity})`;
        ctx.fill();
        ctx.shadowBlur = 0;
      });
      
      // Draw connections between nearby particles
      for (let i = 0; i < particles.length; i++) {
        for (let j = i + 1; j < particles.length; j++) {
          const dx = particles[i].x - particles[j].x;
          const dy = particles[i].y - particles[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 100) {
            const opacity = (100 - distance) / 100 * 0.3;
            ctx.beginPath();
            ctx.moveTo(particles[i].x, particles[i].y);
            ctx.lineTo(particles[j].x, particles[j].y);
            ctx.strokeStyle = `rgba(59, 130, 246, ${opacity})`;
            ctx.lineWidth = 0.5;
            ctx.stroke();
          }
        }
      }
      
      animationId = requestAnimationFrame(animate);
    }
    
    // Initialize
    resizeCanvas();
    animate();
    
    // Handle resize
    window.addEventListener('resize', () => {
      resizeCanvas();
      // Update particle positions for new canvas size
      particles.forEach(particle => {
        if (particle.x > canvas.width) particle.x = canvas.width;
        if (particle.y > canvas.height) particle.y = canvas.height;
      });
    });
    
    console.log('Neural canvas initialized');
  }

  // Typewriter effect
  function typeWriter(element, text, speed = 100) {
    let i = 0;
    element.textContent = '';
    
    function type() {
      if (i < text.length) {
        element.textContent += text.charAt(i);
        i++;
        setTimeout(type, speed);
      }
    }
    
    type();
  }
  
  // Initialize when page loads
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize canvas animation
    setTimeout(initNeuralCanvas, 200);
    
    // Typewriter effect
    const typewriterElement = document.getElementById('typewriter');
    if (typewriterElement) {
      const text = typewriterElement.getAttribute('data-text') || '';
      setTimeout(() => {
        typeWriter(typewriterElement, text, 80);
      }, 1500);
    }
  });
</script>