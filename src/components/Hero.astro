---
import { useTranslations } from '../i18n/utils';
import site from '../data/site.json';

export interface Props {
  lang: 'pt' | 'en';
}

const { lang } = Astro.props;
const t = useTranslations(lang);
---

<section id="home" class="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 pt-16 relative overflow-hidden">
  <!-- Neural Network Background -->
  <div class="absolute inset-0 opacity-20 dark:opacity-15 z-0">
    <canvas id="neuralCanvas" class="absolute inset-0 w-full h-full pointer-events-none"></canvas>
    <!-- Fallback animated pattern -->
    <div class="absolute inset-0 neural-fallback">
      <div class="absolute top-1/4 left-1/4 w-3 h-3 bg-blue-500 rounded-full animate-pulse opacity-30"></div>
      <div class="absolute top-1/2 left-1/3 w-2 h-2 bg-blue-400 rounded-full animate-pulse opacity-25" style="animation-delay: 0.5s"></div>
      <div class="absolute top-3/4 left-1/2 w-4 h-4 bg-blue-600 rounded-full animate-pulse opacity-20" style="animation-delay: 1s"></div>
      <div class="absolute top-1/3 right-1/4 w-3 h-3 bg-indigo-500 rounded-full animate-pulse opacity-35" style="animation-delay: 1.5s"></div>
      <div class="absolute bottom-1/3 right-1/3 w-2 h-2 bg-indigo-400 rounded-full animate-pulse opacity-30" style="animation-delay: 2s"></div>
      <!-- Connecting lines -->
      <svg class="absolute inset-0 w-full h-full" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <pattern id="network-pattern" x="0" y="0" width="100" height="100" patternUnits="userSpaceOnUse">
            <circle cx="20" cy="20" r="1.5" fill="rgb(59, 130, 246)" opacity="0.4"/>
            <circle cx="80" cy="50" r="1" fill="rgb(59, 130, 246)" opacity="0.3"/>
            <circle cx="50" cy="80" r="2" fill="rgb(99, 102, 241)" opacity="0.5"/>
            <path d="M20 20 L80 50 M80 50 L50 80 M50 80 L20 20" stroke="rgb(59, 130, 246)" stroke-width="0.5" opacity="0.2"/>
          </pattern>
        </defs>
        <rect width="100%" height="100%" fill="url(#network-pattern)"/>
      </svg>
    </div>
  </div>
  
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
    <div class="text-center">
      <!-- Avatar/Profile Image -->
      <div class="mb-8">
        <div class="w-32 h-32 mx-auto rounded-full bg-gradient-to-r from-blue-600 to-indigo-600 p-1">
          <img 
            src="/images/author.jpeg" 
            alt={site.name}
            class="w-full h-full rounded-full object-cover"
          />
        </div>
      </div>
      
      <!-- Greeting -->
      <div class="mb-4">
        <p class="text-lg text-gray-600 dark:text-gray-400 mb-2">
          {t('hero.greeting')}
        </p>
        <h1 class="text-4xl sm:text-5xl md:text-6xl font-bold text-gray-900 dark:text-white mb-4">
          {site.name}
        </h1>
      </div>
      
      <!-- Role with Typewriter Effect -->
      <div class="mb-6">
        <h2 class="text-xl sm:text-2xl md:text-3xl font-semibold text-blue-600 dark:text-blue-400 min-h-[1.5em]">
          <span id="typewriter" data-text={site.role[lang]}></span>
          <span class="animate-pulse">|</span>
        </h2>
      </div>
      
      <!-- Description -->
      <p class="text-lg sm:text-xl text-gray-600 dark:text-gray-400 max-w-4xl mx-auto mb-6 leading-relaxed">
        {site.summary[lang]}
      </p>
      
      <!-- Philosophy Quote -->
      <blockquote class="text-sm italic text-gray-500 dark:text-gray-400 max-w-2xl mx-auto mb-8 border-l-4 border-blue-500 pl-4">
        {site.philosophy[lang]}
      </blockquote>
      
      <!-- CTA Buttons -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center items-center">
        <a
          href="#projects"
          class="inline-flex items-center px-8 py-3 border border-transparent text-base font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200 shadow-lg hover:shadow-xl"
        >
          {t('hero.cta.projects')}
          <svg class="ml-2 -mr-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </a>
        
        <a
          href="#about"
          class="inline-flex items-center px-8 py-3 border border-gray-300 dark:border-gray-600 text-base font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-all duration-200 shadow-lg hover:shadow-xl"
        >
          {t('hero.cta.about')}
          <svg class="ml-2 -mr-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
          </svg>
        </a>
      </div>
      
      <!-- Social Links -->
      <div class="mt-12">
        <div class="flex justify-center space-x-6">
          <a
            href={site.social.github}
            target="_blank"
            rel="noopener noreferrer"
            class="text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
            title="GitHub"
          >
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
            </svg>
          </a>
          
          <a
            href={site.social.linkedin}
            target="_blank"
            rel="noopener noreferrer"
            class="text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
            title="LinkedIn"
          >
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
              <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
            </svg>
          </a>
          
          <a
            href={site.social.twitter}
            target="_blank"
            rel="noopener noreferrer"
            class="text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
            title="Twitter"
          >
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
              <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
            </svg>
          </a>
        </div>
      </div>
      
      <!-- Scroll Down Indicator -->
      <div class="mt-16 animate-bounce">
        <a href="#projects" class="inline-block text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
          </svg>
        </a>
      </div>
    </div>
  </div>
</section>

<script>
  // Neural Network Animation
  class NeuralNetwork {
    constructor(canvas) {
      this.canvas = canvas;
      this.ctx = canvas.getContext('2d');
      this.nodes = [];
      this.connections = [];
      this.animationId = null;
      this.mousePos = { x: 0, y: 0 };
      
      this.init();
    }
    
    init() {
      this.resize();
      this.createNodes();
      this.createConnections();
      this.addEventListeners();
      this.animate();
      
      // Hide fallback animation
      const fallback = document.querySelector('.neural-fallback');
      if (fallback) {
        fallback.style.display = 'none';
        console.log('Canvas animation active, fallback hidden'); // Debug
      }
    }
    
    resize() {
      this.canvas.width = this.canvas.offsetWidth;
      this.canvas.height = this.canvas.offsetHeight;
    }
    
    createNodes() {
      const nodeCount = Math.min(50, Math.floor((this.canvas.width * this.canvas.height) / 8000));
      this.nodes = [];
      
      for (let i = 0; i < nodeCount; i++) {
        this.nodes.push({
          x: Math.random() * this.canvas.width,
          y: Math.random() * this.canvas.height,
          vx: (Math.random() - 0.5) * 0.3,
          vy: (Math.random() - 0.5) * 0.3,
          radius: Math.random() * 2 + 1,
          opacity: Math.random() * 0.6 + 0.3,
          pulse: Math.random() * 0.02 + 0.01
        });
      }
      console.log(`Created ${nodeCount} nodes`); // Debug
    }
    
    createConnections() {
      this.connections = [];
      const maxDistance = 150;
      
      for (let i = 0; i < this.nodes.length; i++) {
        for (let j = i + 1; j < this.nodes.length; j++) {
          const dx = this.nodes[i].x - this.nodes[j].x;
          const dy = this.nodes[i].y - this.nodes[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < maxDistance) {
            this.connections.push({
              nodeA: i,
              nodeB: j,
              opacity: (maxDistance - distance) / maxDistance * 0.3
            });
          }
        }
      }
    }
    
    addEventListeners() {
      this.canvas.addEventListener('mousemove', (e) => {
        const rect = this.canvas.getBoundingClientRect();
        this.mousePos.x = e.clientX - rect.left;
        this.mousePos.y = e.clientY - rect.top;
      });
      
      window.addEventListener('resize', () => {
        this.resize();
        this.createNodes();
        this.createConnections();
      });
    }
    
    animate() {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      
      // Update and draw nodes
      this.nodes.forEach((node, i) => {
        // Mouse attraction
        const dx = this.mousePos.x - node.x;
        const dy = this.mousePos.y - node.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < 100) {
          const force = (100 - distance) / 100 * 0.03;
          node.vx += dx / distance * force;
          node.vy += dy / distance * force;
        }
        
        // Update position
        node.x += node.vx;
        node.y += node.vy;
        
        // Boundary bouncing
        if (node.x <= 0 || node.x >= this.canvas.width) node.vx *= -0.8;
        if (node.y <= 0 || node.y >= this.canvas.height) node.vy *= -0.8;
        
        // Keep within bounds
        node.x = Math.max(0, Math.min(this.canvas.width, node.x));
        node.y = Math.max(0, Math.min(this.canvas.height, node.y));
        
        // Friction
        node.vx *= 0.995;
        node.vy *= 0.995;
        
        // Pulse effect
        node.opacity = Math.sin(Date.now() * node.pulse) * 0.2 + 0.4;
        
        // Draw node
        this.ctx.beginPath();
        this.ctx.arc(node.x, node.y, node.radius, 0, Math.PI * 2);
        this.ctx.fillStyle = `rgba(59, 130, 246, ${node.opacity})`;
        this.ctx.fill();
        
        // Data flow particles
        if (Math.random() < 0.02) {
          this.createDataParticle(node.x, node.y);
        }
      });
      
      // Draw connections
      this.connections.forEach(conn => {
        const nodeA = this.nodes[conn.nodeA];
        const nodeB = this.nodes[conn.nodeB];
        
        if (!nodeA || !nodeB) return;
        
        const dx = nodeA.x - nodeB.x;
        const dy = nodeA.y - nodeB.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < 150) {
          const opacity = (150 - distance) / 150 * conn.opacity;
          
          // Animated connection
          const pulse = Math.sin(Date.now() * 0.003) * 0.5 + 0.5;
          
          this.ctx.beginPath();
          this.ctx.moveTo(nodeA.x, nodeA.y);
          this.ctx.lineTo(nodeB.x, nodeB.y);
          this.ctx.strokeStyle = `rgba(59, 130, 246, ${opacity * pulse})`;
          this.ctx.lineWidth = 1;
          this.ctx.stroke();
          
          // Data transmission effect
          if (Math.random() < 0.01) {
            this.drawDataTransmission(nodeA, nodeB);
          }
        }
      });
      
      this.animationId = requestAnimationFrame(() => this.animate());
    }
    
    createDataParticle(x, y) {
      const particle = {
        x, y,
        vx: (Math.random() - 0.5) * 2,
        vy: (Math.random() - 0.5) * 2,
        life: 60,
        maxLife: 60
      };
      
      const drawParticle = () => {
        particle.x += particle.vx;
        particle.y += particle.vy;
        particle.life--;
        
        const alpha = particle.life / particle.maxLife * 0.8;
        this.ctx.beginPath();
        this.ctx.arc(particle.x, particle.y, 2, 0, Math.PI * 2);
        this.ctx.fillStyle = `rgba(96, 165, 250, ${alpha})`;
        this.ctx.fill();
        
        if (particle.life > 0) {
          requestAnimationFrame(drawParticle);
        }
      };
      
      drawParticle();
    }
    
    drawDataTransmission(nodeA, nodeB) {
      const steps = 20;
      let step = 0;
      
      const animate = () => {
        if (step <= steps) {
          const progress = step / steps;
          const x = nodeA.x + (nodeB.x - nodeA.x) * progress;
          const y = nodeA.y + (nodeB.y - nodeA.y) * progress;
          
          this.ctx.beginPath();
          this.ctx.arc(x, y, 3, 0, Math.PI * 2);
          this.ctx.fillStyle = `rgba(34, 197, 94, 0.8)`;
          this.ctx.fill();
          
          step++;
          setTimeout(() => animate(), 50);
        }
      };
      
      animate();
    }
    
    destroy() {
      if (this.animationId) {
        cancelAnimationFrame(this.animationId);
      }
    }
  }

  // Typewriter effect
  function typeWriter(element, text, speed = 100) {
    let i = 0;
    element.textContent = '';
    
    function type() {
      if (i < text.length) {
        element.textContent += text.charAt(i);
        i++;
        setTimeout(type, speed);
      }
    }
    
    type();
  }
  
  // Initialize everything when page loads
  document.addEventListener('DOMContentLoaded', () => {
    // Neural network animation
    const canvas = document.getElementById('neuralCanvas');
    if (canvas) {
      // Ensure canvas has proper dimensions
      setTimeout(() => {
        const neuralNet = new NeuralNetwork(canvas);
        console.log('Neural network initialized'); // Debug
      }, 100);
    } else {
      console.log('Canvas not found'); // Debug
    }
    
    // Typewriter effect
    const typewriterElement = document.getElementById('typewriter');
    if (typewriterElement) {
      const text = typewriterElement.getAttribute('data-text') || '';
      setTimeout(() => {
        typeWriter(typewriterElement, text, 80);
      }, 1500);
    }
  });
  
  // Also try on window load as fallback
  window.addEventListener('load', () => {
    const canvas = document.getElementById('neuralCanvas');
    if (canvas && !canvas.hasAttribute('data-initialized')) {
      canvas.setAttribute('data-initialized', 'true');
      const neuralNet = new NeuralNetwork(canvas);
      console.log('Neural network initialized on window load'); // Debug
    }
  });
</script>