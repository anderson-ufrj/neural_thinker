---
import { useTranslations } from '../i18n/utils';
import type { BlogPost } from '../data/blog';

export interface Props {
  post: BlogPost;
  lang: 'pt' | 'en';
}

const { post, lang } = Astro.props;
const t = useTranslations(lang);

// Format date
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString(lang === 'pt' ? 'pt-BR' : 'en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// Get excerpt from content (first 200 characters)
const getExcerpt = (content: string, maxLength: number = 200) => {
  const plainText = content.replace(/#{1,6}\s+/g, '').replace(/\*\*([^*]+)\*\*/g, '$1').replace(/\*([^*]+)\*/g, '$1');
  return plainText.length > maxLength ? plainText.substring(0, maxLength) + '...' : plainText;
};
---

<article class="bg-white dark:bg-gray-900 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden border border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600">
  <!-- Article Header -->
  <div class="p-6 pb-4">
    <!-- Date and Reading Time -->
    <div class="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400 mb-3">
      <time datetime={post.date}>
        {formatDate(post.date)}
      </time>
      <div class="flex items-center">
        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        {post.readingTime} {t('blog.readingTime')}
      </div>
    </div>
    
    <!-- Title -->
    <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-3 line-clamp-2 hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
      {post.title[lang]}
    </h3>
    
    <!-- Description -->
    <p class="text-gray-600 dark:text-gray-400 mb-4 line-clamp-3">
      {post.description[lang]}
    </p>
    
    <!-- Excerpt -->
    <div class="prose prose-sm prose-gray dark:prose-invert mb-4 line-clamp-4">
      <p class="text-gray-700 dark:text-gray-300 text-sm">
        {getExcerpt(post.content[lang])}
      </p>
    </div>
  </div>
  
  <!-- Article Footer -->
  <div class="px-6 pb-6">
    <!-- Tags -->
    <div class="flex flex-wrap gap-2 mb-4">
      {post.tags.map(tag => (
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
          {tag}
        </span>
      ))}
    </div>
    
    <!-- Read More Button -->
    <button
      class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium text-sm transition-colors group"
      onclick={`openBlogModal('${post.id}', '${lang}')`}
    >
      {t('blog.readMore')}
      <svg class="ml-1 w-4 h-4 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
      </svg>
    </button>
  </div>
</article>

<!-- Blog Modal (will be opened by JavaScript) -->
<div id={`blog-modal-${post.id}`} class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center p-4">
  <div class="bg-white dark:bg-gray-900 rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
    <!-- Modal Header -->
    <div class="sticky top-0 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 p-6">
      <div class="flex justify-between items-start">
        <div class="flex-1">
          <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">
            {post.title[lang]}
          </h2>
          <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 space-x-4">
            <time datetime={post.date}>
              {formatDate(post.date)}
            </time>
            <div class="flex items-center">
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              {post.readingTime} {t('blog.readingTime')}
            </div>
          </div>
        </div>
        <button
          onclick={`closeBlogModal('${post.id}')`}
          class="ml-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <!-- Tags -->
      <div class="flex flex-wrap gap-2 mt-3">
        {post.tags.map(tag => (
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
            {tag}
          </span>
        ))}
      </div>
    </div>
    
    <!-- Modal Content -->
    <div class="p-6">
      <div class="prose prose-lg prose-gray dark:prose-invert max-w-none">
        <div set:html={post.content[lang].replace(/\n/g, '<br>')} />
      </div>
    </div>
  </div>
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-4 {
    display: -webkit-box;
    -webkit-line-clamp: 4;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script define:vars={{ postId: post.id }}>
  // Blog modal functions (global)
  window.openBlogModal = function(id, lang) {
    const modal = document.getElementById(`blog-modal-${id}`);
    if (modal) {
      modal.classList.remove('hidden');
      modal.classList.add('flex');
      document.body.style.overflow = 'hidden';
    }
  };
  
  window.closeBlogModal = function(id) {
    const modal = document.getElementById(`blog-modal-${id}`);
    if (modal) {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
      document.body.style.overflow = 'auto';
    }
  };
  
  // Close modal when clicking outside
  document.getElementById(`blog-modal-${postId}`)?.addEventListener('click', function(e) {
    if (e.target === this) {
      window.closeBlogModal(postId);
    }
  });
</script>