---
import { useTranslations } from '../i18n/utils';
import { blogPosts } from '../data/blog';
import BlogCard from './BlogCard.astro';

export interface Props {
  lang: 'pt' | 'en';
}

const { lang } = Astro.props;
const t = useTranslations(lang);

// Get latest 3 blog posts
const latestPosts = blogPosts.slice(0, 3);
---

<section id="blog" class="py-24 bg-gray-50 dark:bg-gray-800">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-4xl">
    <!-- Section Header -->
    <div class="mb-16">
      <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-12">
        Writing
      </h2>
      
      <!-- Blog Posts List -->
      <div class="space-y-8">
        {latestPosts.map(post => (
          <article class="border-b border-gray-200 dark:border-gray-700 pb-8 last:border-b-0 last:pb-0">
            <div class="flex flex-col md:flex-row md:justify-between md:items-start gap-4">
              <div class="flex-1">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                  {post.title[lang]}
                </h3>
                <p class="text-gray-600 dark:text-gray-400 mb-3 leading-relaxed">
                  {post.description[lang]}
                </p>
                <div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-500 mb-3">
                  <time datetime={post.date}>
                    {new Date(post.date).toLocaleDateString(lang === 'pt' ? 'pt-BR' : 'en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </time>
                  <span>•</span>
                  <span>{post.readingTime} {t('blog.readingTime')}</span>
                </div>
                <button 
                  class="read-more-btn text-sm font-medium text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 transition-colors cursor-pointer"
                  data-post-id={post.id}
                  data-post-title={post.title[lang]}
                  data-post-content={post.content[lang]}
                  data-post-date={post.date}
                  data-post-reading-time={post.readingTime}
                  data-post-tags={post.tags.join(', ')}
                >
                  {t('blog.readMore')} →
                </button>
              </div>
            </div>
          </article>
        ))}
      </div>
    </div>
  </div>
</section>

<!-- Blog Post Modal -->
<div id="blog-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden opacity-0 transition-opacity duration-300">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white dark:bg-gray-900 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden transform scale-95 transition-transform duration-300" id="modal-content">
      <div class="flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700">
        <h2 id="modal-title" class="text-2xl font-bold text-gray-900 dark:text-white pr-4"></h2>
        <button id="close-modal" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 text-2xl leading-none">
          ×
        </button>
      </div>
      <div class="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
        <div id="modal-meta" class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400 mb-6">
          <span id="modal-date"></span>
          <span>•</span>
          <span id="modal-reading-time"></span>
          <span>•</span>
          <span id="modal-tags"></span>
        </div>
        <div id="modal-body" class="prose prose-gray dark:prose-invert max-w-none">
          <!-- Content will be inserted here -->
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Blog modal functionality
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('blog-modal');
    const modalContent = document.getElementById('modal-content');
    const modalTitle = document.getElementById('modal-title');
    const modalBody = document.getElementById('modal-body');
    const modalDate = document.getElementById('modal-date');
    const modalReadingTime = document.getElementById('modal-reading-time');
    const modalTags = document.getElementById('modal-tags');
    const closeBtn = document.getElementById('close-modal');
    const readMoreBtns = document.querySelectorAll('.read-more-btn');

    // Function to format date
    function formatDate(dateStr, lang) {
      const date = new Date(dateStr);
      return date.toLocaleDateString(lang === 'pt' ? 'pt-BR' : 'en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    }

    // Function to convert markdown-like content to HTML
    function processContent(content) {
      // Split content by double line breaks for paragraphs
      const parts = content.split('\n\n');
      let html = '';
      let inList = false;
      
      for (let part of parts) {
        part = part.trim();
        if (!part) continue;
        
        // Handle headers
        if (part.startsWith('## ')) {
          if (inList) {
            html += '</ul>';
            inList = false;
          }
          html += `<h2 class="text-xl font-bold text-gray-900 dark:text-white mt-8 mb-4 first:mt-0">${part.substring(3)}</h2>`;
        }
        // Handle lists
        else if (part.includes('\n- ')) {
          if (inList) {
            html += '</ul>';
          }
          const listItems = part.split('\n- ').map(item => item.trim()).filter(item => item);
          if (listItems.length > 0) {
            html += '<ul class="mb-6 space-y-2 ml-4">';
            listItems.forEach(item => {
              // Remove any leading dash and process bold text
              const cleanItem = item.replace(/^- /, '').replace(/\*\*(.*?)\*\*/g, '<strong class="font-semibold">$1</strong>');
              html += `<li class="text-gray-700 dark:text-gray-300 leading-relaxed">${cleanItem}</li>`;
            });
            html += '</ul>';
          }
          inList = false;
        }
        // Handle regular paragraphs
        else {
          if (inList) {
            html += '</ul>';
            inList = false;
          }
          // Process bold text and create paragraph
          const processedPart = part.replace(/\*\*(.*?)\*\*/g, '<strong class="font-semibold text-gray-900 dark:text-white">$1</strong>');
          html += `<p class="mb-6 leading-relaxed text-gray-700 dark:text-gray-300">${processedPart}</p>`;
        }
      }
      
      if (inList) {
        html += '</ul>';
      }
      
      return html;
    }

    // Open modal
    readMoreBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const title = btn.dataset.postTitle;
        const content = btn.dataset.postContent;
        const date = btn.dataset.postDate;
        const readingTime = btn.dataset.postReadingTime;
        const tags = btn.dataset.postTags;
        
        // Get current language from URL or default to 'pt'
        const lang = window.location.pathname.includes('/en') ? 'en' : 'pt';
        const readingTimeText = lang === 'pt' ? 'min de leitura' : 'min read';

        modalTitle.textContent = title;
        modalBody.innerHTML = processContent(content);
        modalDate.textContent = formatDate(date, lang);
        modalReadingTime.textContent = `${readingTime} ${readingTimeText}`;
        modalTags.textContent = tags;

        modal.classList.remove('hidden');
        setTimeout(() => {
          modal.classList.remove('opacity-0');
          modalContent.classList.remove('scale-95');
          modalContent.classList.add('scale-100');
        }, 10);

        // Prevent body scroll
        document.body.style.overflow = 'hidden';
      });
    });

    // Close modal
    function closeModal() {
      modal.classList.add('opacity-0');
      modalContent.classList.remove('scale-100');
      modalContent.classList.add('scale-95');
      
      setTimeout(() => {
        modal.classList.add('hidden');
        document.body.style.overflow = 'auto';
      }, 300);
    }

    closeBtn.addEventListener('click', closeModal);
    
    // Close modal when clicking outside
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });

    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
        closeModal();
      }
    });
  });
</script>

<style>
  /* Custom scrollbar for modal */
  #modal-content {
    scrollbar-width: thin;
    scrollbar-color: #e5e7eb #f3f4f6;
  }

  #modal-content::-webkit-scrollbar {
    width: 6px;
  }

  #modal-content::-webkit-scrollbar-track {
    background: #f3f4f6;
    border-radius: 3px;
  }

  #modal-content::-webkit-scrollbar-thumb {
    background: #e5e7eb;
    border-radius: 3px;
  }

  #modal-content::-webkit-scrollbar-thumb:hover {
    background: #d1d5db;
  }

  /* Dark mode scrollbar */
  .dark #modal-content {
    scrollbar-color: #4b5563 #374151;
  }

  .dark #modal-content::-webkit-scrollbar-track {
    background: #374151;
  }

  .dark #modal-content::-webkit-scrollbar-thumb {
    background: #4b5563;
  }

  .dark #modal-content::-webkit-scrollbar-thumb:hover {
    background: #6b7280;
  }
</style>